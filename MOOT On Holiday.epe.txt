{
  "name": "MOOT On Holiday",
  "id": "ZxEANYJYk7LTuHfrg",
  "sources": {
    "main": "var twinkleSpeed = 350; // Duration of fade in milliseconds\nvar pixelStates = array(30); // Current brightness levels\nvar targetStates = array(30); // Target brightness levels\nvar pixelColors = array(30); // Stores pixel colors as RGB\nvar frameCounter = 0;\n\n// Define colors: white and three specific blues (based on your image)\nvar colors = [\n  [1, 1, 1],           // White\n  [100 / 255, 255 / 255, 255 / 255], // Light cyan\n  [95 / 255, 242 / 255, 242 / 255], // Medium cyan\n  [89 / 255, 228 / 255, 228 / 255]  // Deeper cyan\n];\n\nexport function sliderSpeed(value) {\n  twinkleSpeed = 100 + value * 1000; // Adjust speed dynamically\n}\n\nfunction updatePixels() {\n  for (var i = 0; i < pixelStates.length; i++) {\n    // Decide new target state with 15-20% probability\n    if (random(1) < 0.175) {\n      targetStates[i] = random(1) < 0.35 ? random(1) * 0.6 + 0.4 : 0; // Target brightness (0.4 to 1 or 0 for off)\n      \n      // Randomly assign one of the defined colors\n      pixelColors[i] = colors[floor(random(colors.length))];\n    }\n  }\n}\n\nexport function beforeRender(delta) {\n  frameCounter += delta;\n\n  // Update pixel targets periodically\n  if (frameCounter > 100) {\n    updatePixels();\n    frameCounter = 0;\n  }\n\n  // Gradually move current state towards target state\n  for (var i = 0; i < pixelStates.length; i++) {\n    pixelStates[i] += (targetStates[i] - pixelStates[i]) * (delta / twinkleSpeed);\n  }\n}\n\nexport function render(index) {\n  var brightness = pixelStates[index];\n  var color = pixelColors[index];\n\n  if (brightness > 0) {\n    rgb(color[0] * brightness, color[1] * brightness, color[2] * brightness);\n  } else {\n    rgb(0, 0, 0);\n  }\n}\n"
  },
  "preview": "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"
}